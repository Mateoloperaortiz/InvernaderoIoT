#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Invernadero"

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temp;
  CloudPercentage humedadSuelo;
  CloudPercentage velFan1;
  CloudPercentage velFan2;
  CloudRelativeHumidity humedad;
  bool automatico;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "arduino_secrets.h"
#include "thingProperties.h"
#include "DHT.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

const int PIN_DHT = 2;           
const int PIN_VENTILADOR1 = 5;   
const int PIN_VENTILADOR2 = 6;   
const int PIN_SENSOR_SUELO = A0; 

DHT sensorDHT(PIN_DHT, DHT22);

Adafruit_SSD1306 pantalla(128, 64, &Wire, -1);

const int TIEMPO_MUESTREO = 2000;    
const float TEMP_MINIMA = 20.0;      
const float TEMP_MAXIMA = 35.0;      
const int HUMEDAD_SUELO_MINIMA = 30; 

const int SUELO_SECO = 1020;   
const int SUELO_MOJADO = 632;  

const int NUM_MUESTRAS = 10;
float lecturasSuelo[NUM_MUESTRAS];
int indiceLectura = 0;

unsigned long tiempoUltimaLectura = 0;

float convertirRango(float valor, float minEntrada, float maxEntrada, float minSalida, float maxSalida) {
    return (valor - minEntrada) * (maxSalida - minSalida) / (maxEntrada - minEntrada) + minSalida;
}

void configurarPantalla() {
    if (!pantalla.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        while (1);
    }
    pantalla.setTextSize(1);
    pantalla.setTextColor(SSD1306_WHITE);
}

void setup() {
    sensorDHT.begin();
    
    pinMode(PIN_VENTILADOR1, OUTPUT);
    pinMode(PIN_VENTILADOR2, OUTPUT);
    pinMode(PIN_SENSOR_SUELO, INPUT);
    
    velFan1 = velFan2 = 0;
    automatico = true;
    
    initProperties();
    ArduinoCloud.begin(ArduinoIoTPreferredConnection);
    
    configurarPantalla();
}

void loop() {
    ArduinoCloud.update();
    
    if (millis() - tiempoUltimaLectura >= TIEMPO_MUESTREO) {
        leerSensores();
        if (automatico) {
            controlAutomatico();
        }
        actualizarPantalla();
        tiempoUltimaLectura = millis();
    }
    
    actualizarVentiladores();
}

void leerSensores() {
    float tempActual = sensorDHT.readTemperature();
    float humedadActual = sensorDHT.readHumidity();
    
    if (!isnan(tempActual) && !isnan(humedadActual)) {
        temp = tempActual;
        humedad = humedadActual;
    }
    
    lecturasSuelo[indiceLectura] = analogRead(PIN_SENSOR_SUELO);
    indiceLectura = (indiceLectura + 1) % NUM_MUESTRAS;
    
    float sumaLecturas = 0;
    for (int i = 0; i < NUM_MUESTRAS; i++) {
        sumaLecturas += lecturasSuelo[i];
    }
    float promedioSuelo = sumaLecturas / NUM_MUESTRAS;
    
    float porcentajeHumedad = convertirRango(promedioSuelo, SUELO_SECO, SUELO_MOJADO, 0, 100);
    
    if (porcentajeHumedad > 100) {
        porcentajeHumedad = 100;
    } else if (porcentajeHumedad < 0) {
        porcentajeHumedad = 0;
    }
    
    humedadSuelo = porcentajeHumedad;
}

void controlAutomatico() {
    float velocidad;
    
    if (temp >= TEMP_MAXIMA) {
        velocidad = 100;
    } else if (temp <= TEMP_MINIMA) {
        velocidad = 20;
    } else {
        float proporcionTemp = (temp - TEMP_MINIMA) / (TEMP_MAXIMA - TEMP_MINIMA);
        velocidad = 20 + (proporcionTemp * proporcionTemp * 80);
    }
    
    if (humedadSuelo >= 95) {
        velocidad = 100;
    } else if (humedadSuelo > 80) {
        velocidad = max(velocidad * 2.0, 80.0f);
    } else if (humedadSuelo > 60) {
        velocidad = max(velocidad * 1.5, 60.0f);
    } else if (humedadSuelo > 30) {
        velocidad *= (0.8 + ((humedadSuelo - 30) / 30) * 0.7);
    } else {
        velocidad *= 0.8;
    }
    
    velocidad = constrain(velocidad, 20, 100);
    velFan1 = velFan2 = velocidad;
}

void actualizarVentiladores() {
    int pwm1 = int(convertirRango(float(velFan1), 0, 100, 0, 255));
    int pwm2 = int(convertirRango(float(velFan2), 0, 100, 0, 255));
    
    pwm1 = constrain(pwm1, 0, 255);
    pwm2 = constrain(pwm2, 0, 255);
    
    analogWrite(PIN_VENTILADOR1, pwm1);
    analogWrite(PIN_VENTILADOR2, pwm2);
}

void actualizarPantalla() {
    pantalla.clearDisplay();
    pantalla.setCursor(0, 0);
    
    pantalla.println("INVERNADERO - CONTROL");
    pantalla.println("--------------------");
    pantalla.print("Temp: ");
    pantalla.print(float(temp));
    pantalla.println(" C");
    pantalla.print("Hum. Aire: ");
    pantalla.print(float(humedad));
    pantalla.println("%");
    pantalla.print("Hum. Suelo: ");
    pantalla.print(float(humedadSuelo));
    pantalla.println("%");
    pantalla.print("Vent 1: ");
    pantalla.print(float(velFan1));
    pantalla.println("%");
    pantalla.print("Vent 2: ");
    pantalla.print(float(velFan2));
    pantalla.println("%");
    pantalla.print("Modo: ");
    pantalla.println(automatico ? "Auto" : "Manual");
    
    pantalla.display();
}

void onAutomaticoChange() {
    Serial.println("Cambio de modo: " + String(automatico ? "Automatico" : "Manual"));
}